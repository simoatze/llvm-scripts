#+DESCRIPTION: Archer Installation Script
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

* License
Please see LICENSE for usage terms.

* Introduction
#+HTML: <img src="resources/images/archer_logo.png" hspace="5" vspace="5" height="45%" width="45%" alt="Archer Logo" title="Archer" align="right" />

*Archer* is a data race detector for OpenMP programs.
# <span style="font-weight: bold; font-variant: small-caps">archer</span>

Archer combines static and dynamic techniques to identify data races
in large OpenMP applications, leading to low runtime and memory
overheads, while still offering high accuracy and precision. It builds
on open-source tools infrastructure such as LLVM, ThreadSanitizer, and
OMPT to provide portability.

* Prerequisites
To compile Archer you need an host Clang/LLVM version >= 3.9, a
CMake version >= 3.4.3.

Ninja build system is preferred. For more information how to obtain
Ninja visit https://martine.github.io/ninja.

Archer has been tested with the LLVM OpenMP Runtime version >= 3.9,
and with the LLVM OpenMP Runtime with OMPT support currently under
development at https://github.com/OpenMPToolsInterface/LLVM-openmp
(under the branch "align-to-tr").

* Installation
Archer has been developed under LLVM 3.9 (for more information visit
http://llvm.org).

** Manual Building
For a manual building please visit the GitHub page
https://github.com/PRUNERS/archer.

** Automatic Building
Archer comes both as standalone and LLVM tool.

In order to obtain and automatically build Clang/LLVM with Archer
support execute the following commands in your command-line
(instructions are based on bash shell, GCC-4.9.3 version and Ninja
build system).

Build Clang/LLVM 3.9 with Archer support by running =install.sh=:

#+BEGIN_SRC sh :exports code
  export LLVM_INSTALL=$HOME/usr
  ./install.sh <path-to-installation-folder>
#+END_SRC

The installation script will create a folder called /LLVM/ at the same
level of the /llvm_archer/ directory and install LLVM into
/LLVM_INSTALL/. By default the script will try to install the software
under "/usr".

Once the installation completes, you need to setup your environement
to allow Archer to work correctly.

Please set the following path variables:

#+BEGIN_SRC
export PATH=${LLVM_INSTALL}/bin:${PATH}"
export LD_LIBRARY_PATH=${LLVM_INSTALL}/lib:${LD_LIBRARY_PATH}"
#+END_SRC

To make the environment permanent add the previous lines or
equivalents to your shell start-up script such as "~/.bashrc".

** Options

Running the command:

#+BEGIN_SRC
./install --help
#+END_SRC

shows the options available for building and installing Clang/LLVM
with Archer support.

#+BEGIN_SRC
Usage

  ./install.sh [options]

Options
  --prefix=<value>             = Specify an installation path.
  --build-system=<value>       = Specify a build system generator. Please run
                                 'man cmake-generators' for a list of generators
                                 available for this platform. Default is Ninja.
  --release=<value>            = Specify the release version of Clang/LLVM that
                                 will be installed (>= 39). Default is 3.9.
  --http                       = Enables GitHub web url in case SSH key and
                                 passphrase are not set in the GitHub account.
  --llvm-only                  = Build and install only Clang/LLVM without
                                 Archer support and OpenMP runtime.
  --update                     = Update previous building. Default is SSH.
  --omp-tsan-support           = Enabled ThreadSanitizer support in official
                                 LLVM OpenMP runtime. Default is an LLVM OpenMP
                                 Runtime with OMPT support.
  --build-type=<value>         = Specify the type of build. Accepted values
                                 are Release (default), Debug or RelWithDebInfo.
  --gcc-toolchain-path=<value> = Specify the GCC toolchain path.
#+END_SRC

* Publications

- S. Atzeni, G. Gopalakrishnan, Z. Rakamaric, D. H. Ahn, I. Laguna,
  M. Schulz, G. L. Lee, J. Protze, and M. S. Müller. 2016. "ARCHER:
  Effectively Spotting Data Races in Large Openmp Applications." In
  2016 IEEE International Parallel and Distributed Processing
  Symposium (IPDPS),
  53–62. http://ieeexplore.ieee.org/document/7516001/
- J. Protze, S. Atzeni, D. H. Ahn, M. Schulz, G.  Gopalakrishnan,
  M. S. Müller, I. Laguna, Z.  Rakamarić, and
  G. L. Lee. 2014. "Towards Providing Low-Overhead Data Race Detection
  for Large Openmp Applications." In Proceedings of the 2014 LLVM
  Compiler Infrastructure in HPC,
  40–47. http://dl.acm.org/citation.cfm?id=2688369

* Contacts and Support

- [[https://groups.google.com/forum/#!forum/archer-pruner][Google group]]
- [[https://pruner.slack.com/shared_invite/MTIzNzExNzg4ODgxLTE0ODM3MzE2NTctNmRjNmM0NDYwNA][Slack Channel]]
- E-Mail Contacts:
  #+HTML: <ul style="list-style-type:circle"> <li> <a href="mailto:simone@cs.utah.edu?Subject=[archer-dev]%20" target="_top">Simone Atzeni</a> </li> <li> <a href="mailto:protze@itc.rwth-aachen.de?Subject=[archer-dev]%20" target="_top">Joachim Protze</a> </li> </ul>

* Sponsors

#+HTML: <img src="resources/images/uofu_logo.png" hspace="15" vspace="5" height="23%" width="23%" alt="UofU Logo" title="University of Utah" style="float:left" /> <img src="resources/images/llnl_logo.png" hspace="70" vspace="5" height="30%" width="30%" alt="LLNL Logo" title="Lawrence Livermore National Laboratory" style="float:center" /> <img src="resources/images/rwthaachen_logo.png" hspace="15" vspace="5" height="23%" width="23%" alt="RWTH AACHEN Logo" title="RWTH AACHEN University" style="float:left" />
